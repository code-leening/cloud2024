server:
  port: 80

spring:
  application:
    name: cloud-consumer-openfeign-order
  # ====== Spring Cloud Consul for Service Discovery ======
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true #优先使用服务ip进行注册
        #service-name:服务8001以对应spring-application-name的名字入住到consul中
        service-name: ${spring.application.name}
    openfeign:
      client:
        config:
#          default:
#            #链接超时时间 60秒
#            connect-timeout: 60000
#            #读取超时时间 60秒
#            read-timeout: 60000
          cloud-payment-service:
              #链接超时时间
              connect-timeout: 20000
              #读取超时时间
              read-timeout: 20000
      #apache-httpclient
      httpclient:
        hc5:
          enabled: true
      #请求/相应压缩，节约带宽和服务器压力
      compression:
        request:
          enabled: true
          mime-types: text/xml,application/xml,application/json
          min-request-size: 2048
        response:
          enabled: true
      #开启circuitbreaker和分组激活 spring.cloud.openfeign.circuitbreaker.enabled
#      circuitbreaker:
#        enabled: true
#        group:
#          enabled: true #没开分组永远不用分组的配置，精确优先、分组次之（开了分组）、默认最后
#feign日志以什么级别监控那个接口
logging:
  level:
    com:
      atguigu:
        cloud:
          apis:
            PayFeignApi: debug



## 基于次数的降级
#resilience4j:
#  circuitbreaker: # 降级熔断
#    configs:
#      default:
#        failure-rate-threshold: 50 # 调用失败达到50%后打开断路器
#        sliding-window-type: count_based # 滑动窗口类型
#        sliding-window-size: 6 # 滑动窗口大小 count_based6个请求 time_base6秒
#        minimum-number-of-calls: 6 # 每个滑动窗口的周期（断路器计算失败率或者慢调用率之前所需的最小样本数）
#        automatic-transition-from-open-to-half-open-enabled: true # 开始过度到半开状态
#        wait-duration-in-open-state: 5s # 从开启到半开启需要5s
#        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许通过的最大请求数
#        record-exceptions:
#          - java.lang.Exception
#    instances: #实例-那个实例使用
#      cloud-payment-service:
#        base-config: default #上边的configs-default配置

## 基于慢调用的降级
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s # 默认1s 超过1s直接降级 (坑)
#  circuitbreaker:
#    configs:
#      default:
#        failure-rate-threshold: 50 # 调用失败达到50%后打开断路器
#        slow-call-duration-threshold: 2s # 慢调用时间阈值
#        slow-call-rate-threshold: 30 # 慢调用百分比峰值
#        sliding-window-type: time_based # 滑动窗口类型
#        sliding-window-size: 2 # 滑动窗口大小 count_based6个请求 time_base6秒
#        minimum-number-of-calls: 2 # 每个滑动窗口的周期
#        automatic-transition-from-open-to-half-open-enabled: true # 开始过度到半开状态
#        wait-duration-in-open-state: 5s # 从开启到半开启需要5s
#        permitted-number-of-calls-in-half-open-state: 2 #半开状态允许通过的最大请求数
#        record-exceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        base-config: default


## 信号量舱壁配置 【resilience4j bulkhead - SEMAPHORE】
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s # 默认1s 超过1s直接降级 (坑)
#  bulkhead: # 信号量舱壁配置 ==================
#    configs:
#      default:
#        max-concurrent-calls: 2 #隔离允许并发线程执行的最大数
#        max-wait-duration: 1s #当达到并发调用数量时，新的线程阻塞时间。超时不候进舱壁兜底fallback
#    instances:
#      cloud-payment-service:
#        base-config: default

## 信号量-固定线程池舱壁配置【resilience4j bulkhead - THREADPOOL】
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 20s # 默认1s 超过1s直接降级 (坑)
#  thread-pool-bulkhead:
#    configs:
#      default:
#        core-thread-pool-size: 1
#        max-thread-pool-size: 1
#        queue-capacity: 1
#    instances:
#      cloud-payment-service:
#        baseConfig: default
##spring.cloud.openfeign.circuitbreaker.group.enabled 请设置为false 新启线程和原线程脱离

# 限流 rateLimiter配置
#resilience4j:
#  ratelimiter:
#    configs:
#      default:
#        limit-for-period: 2 # 一次刷新周期内允许最大的请求数
#        limit-refresh-period: 1s # 刷新周期
#        timeout-duration: 1 # 默认等待时间
#    instances:
#      cloud-payment-service:
#        base-config: default

# ======= ZipKin ======
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # 采样率,默认值0.1(就是10%的链路会被记录下来)

